import Head from "next/head";
import { useState, useRef } from "react";
import LinkContainer from "@/components/UI/LinkContainer";

import  homepage_svg  from './../assets/search.svg';

import { sortArray } from "@/utils/utils";
import Image from "next/image";

export default function Home() {
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState([]);
  const [pageNumber, setPageNumber] = useState(1);
  const [query, setQuery] = useState("");

  const searchQueryRef = useRef(null);

  
  const getTorrents = async () => {
    if (searchQueryRef.current.value === "") return;

    setLoading(true);

    try {
      const [res_1337x, res_rarbg, res_pirateBay] = await Promise.allSettled([
        fetch(
          `https://torrent-scrape-server.cyclic.app/torrent/1337x/search/${searchQueryRef.current.value}/${pageNumber}`
        ),
        fetch(
          `https://torrent-scrape-server.cyclic.app/torrent/rarbg/search/${searchQueryRef.current.value}/${pageNumber}`
        ),
        fetch(
          `https://torrent-scrape-server.cyclic.app/torrent/piratebay/search/${searchQueryRef.current.value}/${pageNumber}`
        ),
      ]);

      console.log(res_1337x, res_pirateBay, res_rarbg);

      if(res_1337x.value.ok === false && res_pirateBay.value.ok === false && res_rarbg.value.ok === false) {
        throw new Error('Invalid Response Recieved, What you are searching might not be available, Change Your Search value')
      }
  
      const r = await Promise.allSettled([
        res_1337x.value.json(),
        res_rarbg.value.json(),
        res_pirateBay.value.json(),
      ]);
  
      const temp = [
        [...r[0].value.result, ...r[1].value.result, ...r[2].value.result],
      ];
      
      const returnArray = sortArray(temp);
      setData(returnArray);
      
    } catch (error) {
      console.error(error.message);
      setLoading(false);
      return;
    }   
  
    setLoading(false);

  };

  return (
    <>
      <Head>
        <title>Torrents</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex w-full flex-col items-center  h-full">
        {/* app container */}
        <div className="flex flex-col shadow-2xl bg-[#121212ee] justify-center rounded-xl h-fit  w-[98%] md:w-[70%] xl:2/3 2xl:w-1/2 mt-2  md:mt-12  py-2 ">
          <div className="  flex justify-center  p-4">
            <Image className="w-2/3 md:w-[40%] h-fit" src={homepage_svg} alt="homepage search box image" />
          </div>
          {/* search container */}
          <div className="flex w-full mb-6  rounded-lg p-4 h-fit  ">
            <input
              ref={searchQueryRef}
              type="text"
              className="w-full bg-[#12121233] text-white   rounded-lg text-md  md:text-xl p-2 outline-none border-[2px] border-purple-400  focus:border-[2px] focus:border-purple-500  "
              placeholder="Torrent Search"
            />
            <button
              onClick={getTorrents}
              className="text-lg ml-4 active:scale-[0.98]  bg-purple-500 py-2 px-4 rounded-lg cursor-pointer  hover:bg-purple-600 duration-200 transition-all text-white font-semibold  "
            >
              SEARCH
            </button>
          </div>
           
         
        </div>

          {/* loading spinner */}
        {loading ? (
           <div className="loader mt-6"  />
          ) : null}
          {/* result list */}
          {data && data.length > 0 ? <div className="flex flex-col  h-fit  w-[98%] md:w-[70%] xl:2/3 2xl:w-1/2 mt-12  py-2" > 
          
          {data.map((item, index) => <LinkContainer key={index} data={item} /> )}
        
          </div> : null}

          <div className="flex flex-col  h-fit  w-[98%] md:w-[70%] xl:2/3 2xl:w-1/2 mt-12  py-2 ">

        
          </div>

     
      </main>
    </>
  );
}
